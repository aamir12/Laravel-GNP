apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-db
spec:
  selector:
    matchLabels:
      app: mysql-db
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
      - name: mysql-db
        image: mysql:5.7
        resources: {}
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gip-app-secrets
              key: DB_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-db-persistent-data
          subPath: dbdata/
          mountPath: /var/lib/mysql
        args:
          - "--ignore-db-dir=lost+found"
          - "--innodb-use-native-aio=0"
      volumes:
        - name: mysql-db-persistent-data
          persistentVolumeClaim:
              claimName: mysql-db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-db-service
spec:
  selector:
    app: mysql-db
  ports:
  - port: 80
    targetPort: 3306
  type: NodePort
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: mysql-db-efs
# spec:
#   capacity:
#     storage: 5Gi # Doesn't really matter, as EFS does not enforce it anyway
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteMany
#   # mountOptions:
#   #   - hard
#   #   - nfsvers=4.1
#   #   - rsize=1048576
#   #   - wsize=1048576
#   #   - timeo=600
#   #   - retrans=2
#   nfs:
#     path: /
#     server: fs-02b2e0c9.efs.eu-west-1.amazonaws.com
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: mysql-db-efs
# spec:
#   storageClassName: ""
#   accessModes:
#     - ReadWriteMany
#   resources:
#     requests:
#       storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-db-pvc
  annotations:
    volume.beta.kubernetes.io/storage-class: gp2
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ingress-mysql-db-service
#   annotations:
#     # use the shared ingress-nginx
#     kubernetes.io/ingress.class: "nginx"
#     alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:865258441275:certificate/095227ae-c34f-4863-ae16-e6d9e7ebeea5
# spec:
#   rules:
#   - host: db-dev-earnie.lightfoot.co.uk
#     http:
#       paths:
#       - path: /
#         backend:
#           serviceName: mysql-db-service
#           servicePort: 80
# ---